{"version":3,"sources":["Todos/components/TodoForm.tsx","ContextApi/StoreContext.ts","Todos/containers/todos.tsx","Sidebar/components/DropDown.tsx","Sidebar/containers/sidebar.tsx","Layouts/layout.tsx","App.tsx","Store/store.ts","reportWebVitals.ts","index.tsx"],"names":["TodoForm","changeHandler","values","clickHandler","errors","sm","inline","className","for","required","onChange","value","title","type","name","id","placeholder","description","onClick","Context","createContext","Todos","observer","useContext","addTodos","removeTodos","useState","setValues","setErrors","e","target","prevValues","Number","Math","random","todo","prevErrors","ErrorsChecking","DropDown","isToggle","toggle","Direction","isOpen","caret","alert","sidebar","setIsToggle","todos","showTodos","map","layout","children","fluid","lg","xl","App","store","useLocalObservable","push","filter","useStore","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a75dcdbf.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport { FormValues } from '../interfaces';\n\ninterface Props {\n    changeHandler: any;\n    values: FormValues;\n    clickHandler: any;\n    errors: {\n        title: string,\n        description: string,\n    }\n}\nconst TodoForm: FC<Props> = ({ changeHandler, values, clickHandler, errors }) => {\n    return (\n        <Row>\n            <Col sm=\"6\">\n                <Form inline>\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"title\" className=\"mr-sm-2\">Title</Label>\n                        <Input required onChange={changeHandler} value={values.title} type=\"text\" name=\"title\" id=\"title\" placeholder=\"\" />\n                    </FormGroup>\n                    {errors && errors.title && <div className=\"form-error\">{errors.title}</div>}\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"description\" className=\"mr-sm-2\">Description</Label>\n                        <Input required onChange={changeHandler} value={values.description} type=\"textarea\" name=\"description\" id=\"description\" />\n                    </FormGroup>\n                    {errors && errors.description && <div className=\"form-error\">{errors.description}</div>}\n                    <FormGroup className=\"mt-2 mr-sm-2 mb-sm-0\">\n                        <Button onClick={clickHandler}>Submit</Button>\n                    </FormGroup>\n                </Form>\n            </Col>\n        </Row>\n    );\n};\n\nexport default TodoForm;","import { createContext } from 'react';\nimport { Store } from '../Todos/interfaces'\n\nexport const Context = createContext<Store>({} as Store);","import React, { ChangeEvent, FC, useState, useContext } from 'react';\nimport { observer } from 'mobx-react';\nimport Formik from '../components/TodoForm';\nimport { FormValues } from '../interfaces';\nimport { Context } from '../../ContextApi/StoreContext';\nimport \"../todos.scss\";\n\nconst Todos: FC = observer(() => {\n    const { addTodos, removeTodos } = useContext(Context);\n    const [values, setValues] = useState<FormValues>({\n        id: null,\n        title: \"\",\n        description: \"\"\n    });\n    const [errors, setErrors] = useState({\n        title: \"\",\n        description: \"\"\n    });\n    const ErrorsChecking = () => {\n        const { title, description } = values;\n        if (title && description) {\n            return true;\n        }\n        if (!title) setErrors(prevErrors => ({ ...prevErrors, title: \"Title is Required\", description: \"\" }));\n        if (!description) setErrors(prevErrors => ({ ...prevErrors, title: \"\", description: \"Description is Required\" }));\n        if (!title && !description) setErrors(prevErrors => ({ ...prevErrors, title: \"Title is Required\", description: \"Description is Required\" }));\n        return false;\n    }\n    const changeHandler = (e: ChangeEvent) => {\n        const { name, value } = e.target as HTMLInputElement;\n        setValues(prevValues => ({\n            ...prevValues,\n            id: Number((Math.random() * 4) + 5),\n            [name]: value,\n        }));\n        setErrors({ title: \"\", description: \"\" })\n    };\n    const clickHandler = (todo: FormValues) => {\n        const isVerified = ErrorsChecking();\n        if (isVerified) {\n            addTodos(values);\n            setValues({\n                id: null,\n                title: \"\",\n                description: \"\"\n            });\n        }\n    };\n    return (\n        <div>\n            <Formik {...{ values, changeHandler, clickHandler, errors }} />\n        </div>\n    );\n});\n\nexport default Todos;","import React, { FC } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { FaTh } from 'react-icons/fa';\n\ninterface Props {\n    isToggle: boolean,\n    id: number | null;\n    toggle: () => void;\n    removeTodos: (id: number) => void;\n}\nconst DropDown: FC<Props> = ({ isToggle, toggle, removeTodos, id }) => {\n    return (\n        <Dropdown \n        Direction={\"right\"} \n        isOpen={isToggle} \n        toggle={toggle}\n        >\n            <DropdownToggle caret>\n                <FaTh />\n            </DropdownToggle>\n            <DropdownMenu>\n                <DropdownItem><span>Edit</span></DropdownItem>\n                <DropdownItem><span onClick={() => {\n                    alert(\"Fired\")\n                    removeTodos(id as number)\n                }}>Delete</span></DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n    );\n};\n\nexport default DropDown;","import React, { useContext, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Context } from '../../ContextApi/StoreContext';\nimport Dropdown from '../components/DropDown';\n\nconst sidebar = observer(() => {\n    const [isToggle, setIsToggle] = useState<boolean>(false);\n    const toggle = () => setIsToggle(!isToggle);\n\n    const { todos, removeTodos } = useContext(Context);\n    const showTodos = todos.map(({ title, description, id }) => <div className=\"border\" key={id}>\n        <Dropdown {...{ isToggle, toggle, removeTodos, id }} />\n        <b>{title}</b>\n        <p>{description}</p>\n    </div>)\n    return (\n        <div className=\"\">\n            {showTodos}\n        </div>\n    );\n});\n\nexport default sidebar;","import React from 'react';\nimport { Container, Row, Col, } from 'reactstrap'\nimport Sidebar from '../Sidebar/containers/sidebar';\n\nconst layout = ({ children }: any) => {\n    return (\n        <Container className=\"layout-container bg-dark text-white\" fluid>\n            <Row>\n               <div className=\"\">\n                    <ul>\n                        <li><b>Improves your memory:</b> A to do list acts as an external memory aid.</li>\n                        <li><b>Increases productivity:</b> A to do list allows you to prioritize the tasks that are more important. </li>\n                        <li><b>Helps with motivation:</b> To do lists are a great motivational tool because you can use them to clarify your goals.</li>\n                    </ul>\n               </div>\n            </Row>\n            <Row>\n                <Col className=\"border\" lg=\"3\" xl=\"3\" sm=\"3\" >\n                    <Sidebar />\n                </Col>\n                <Col className=\"border\">\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default layout;","import React, { FC } from 'react';\nimport Todos from './Todos/containers/todos';\nimport { Context } from './ContextApi/StoreContext';\nimport { useStore } from './Store/store';\nimport Layout from './Layouts/layout';\nimport { Store } from './Todos/interfaces';\n\nconst App: FC = () => {\n  const store: Store = useStore();\n  return (\n    <Context.Provider value={store}>\n      <Layout>\n        <Todos />\n      </Layout>\n    </Context.Provider>\n  );\n};\n\nexport default App;","\nimport { useLocalObservable } from 'mobx-react'\nimport { FormValues, Store } from '../Todos/interfaces';\nexport const useStore = () => {\n\tconst store: Store =  useLocalObservable(() => ({\n\t\ttodos: [] as FormValues[],\n\t\taddTodos: (todo: FormValues) => {\n\t\t\tstore.todos.push(todo);\n\t\t},\n\t\tremoveTodos: (id: number) => {\n\t\t\talert(\"Fired\")\n\t\t\tlet todos = store.todos.filter(todo => todo.id !== id);\n\t\t\tstore.todos = todos;\n\t\t}\n\t}));\n\treturn store;\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"assets/css/nucleo-svg.css\";\n// import \"assets/css/nucleo-icons.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}