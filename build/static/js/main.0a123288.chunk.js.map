{"version":3,"sources":["Todos/components/TodoForm.tsx","ContextApi/StoreContext.ts","Todos/containers/todos.tsx","Sidebar/components/DropDown.tsx","Sidebar/containers/sidebar.tsx","Layouts/layout.tsx","App.tsx","Store/store.ts","reportWebVitals.ts","index.tsx"],"names":["TodoForm","changeHandler","values","clickHandler","errors","clearSingleCat","cat","sm","inline","Object","keys","length","onClick","className","for","required","onChange","value","name","type","id","placeholder","age","breed","defaultValue","description","Context","createContext","Todos","observer","useContext","addCats","cats","updateCat","useState","setValues","useEffect","_id","setErrors","e","target","prevValues","todo","isVerified","prevErrors","title","ErrorsChecking","DropDown","removeCat","getSingleCat","isToggle","setIsToggle","Direction","isOpen","toggle","caret","sidebar","getAllCats","showTodos","map","layout","children","fluid","lg","xl","App","store","useLocalObservable","axios","put","then","newCat","push","data","catch","err","console","log","get","allCats","alert","post","res","filterd","filter","oldcats","useStore","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a123288.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport { FormValues } from '../interfaces';\n\ninterface Props {\n    changeHandler: any;\n    values: FormValues;\n    clickHandler: any;\n    clearSingleCat: any;\n    cat: any;\n    errors: {\n        name: string;\n        age: string | number;\n        breed: string;\n        description: string;\n    }\n}\nconst TodoForm: FC<Props> = ({ changeHandler, values, clickHandler, errors, clearSingleCat, cat }) => {\n    return (\n        <Row>\n            <Col sm=\"6\">\n                <Form inline>\n                    {(typeof cat === \"object\" && Object.keys(cat).length) ? <Button onClick={() => {\n                        if ( typeof clearSingleCat === \"function\") {\n                            clearSingleCat(); \n                        }\n                    }}>Incert New Cat</Button>: null}\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"name\" className=\"mr-sm-2\">Name</Label>\n                        <Input required onChange={changeHandler} value={values.name} type=\"text\" name=\"name\" id=\"name\" placeholder=\"\" />\n                    </FormGroup>\n                    {errors && errors.name && <div className=\"form-error\">{errors.name}</div>}\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"age\" className=\"mr-sm-2\">Age</Label>\n                        <Input required onChange={changeHandler} value={values.age} type=\"text\" name=\"age\" id=\"age\" placeholder=\"\" />\n                    </FormGroup>\n                    {errors && errors.age && <div className=\"form-error\">{errors.age}</div>}\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"name\" className=\"mr-sm-2\">Breed</Label>\n                        <Input required onChange={changeHandler} value={values.breed} type=\"text\" name=\"breed\" id=\"breed\" placeholder=\"\" />\n                    </FormGroup>\n                    {errors && errors.breed && <div className=\"form-error\">{errors.breed}</div>}\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                        <Label for=\"description\" className=\"mr-sm-2\">Description</Label>\n                        <Input required onChange={changeHandler} defaultValue={values.description} value={values.description} type=\"textarea\" name=\"description\" id=\"description\" />\n                    </FormGroup>\n                    {errors && errors.description && <div className=\"form-error\">{errors.description}</div>}\n                    <FormGroup className=\"mt-2 mr-sm-2 mb-sm-0\">\n                        <Button onClick={clickHandler}>Submit</Button>\n                    </FormGroup>\n                </Form>\n            </Col>\n        </Row>\n    );\n};\n\nexport default TodoForm;","import { createContext } from 'react';\nimport { Store } from '../Todos/interfaces'\n\nexport const Context = createContext<Store>({} as Store);","import React, { ChangeEvent, FC, useState, useContext, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport Formik from '../components/TodoForm';\nimport { FormValues } from '../interfaces';\nimport { Context } from '../../ContextApi/StoreContext';\nimport \"../todos.scss\";\n\nconst Todos: FC = observer(() => {\n    const { cats , addCats, cat, clearSingleCat, updateCat } = useContext(Context);\n    const [values, setValues] = useState<FormValues>({\n        name: \"\",\n        age: \"\",\n        breed: \"\",\n        description: \"\",\n    });\n    useEffect(() => {\n        if (typeof cat === \"object\" && Object.keys(cat).length) {\n            setValues(cat);\n        } else {\n            setValues({\n                name: \"\",\n                age: \"\",\n                breed: \"\",\n                description: \"\",\n            });\n        }\n    }, [cat])\n    const [errors, setErrors] = useState({\n        _id: \"\",\n        name: \"\",\n        age: \"\",\n        breed: \"\",\n        description: \"\",\n    });\n    const ErrorsChecking = () => {\n        const { name, age, breed } = values;\n        if (name && age && breed) {\n            return true;\n        }\n        if (!name) setErrors(prevErrors => ({ ...prevErrors, name: \"Name is Required\", age: \"\", breed: \"\" }));\n        if (!age) setErrors(prevErrors => ({ ...prevErrors, name: \"\", age: \"Age is Required\", breed:\"\" }));\n        if (!breed) setErrors(prevErrors => ({ ...prevErrors, name: \"\", age: \"\", breed: \"Breed is Required\" }));\n        if (!breed && !age && !breed) setErrors(prevErrors => ({ ...prevErrors, title: \"Title is Required\", age: \"Age is Required\", breed:\"Breed is Required\" }));\n        return false;\n    }\n    const changeHandler = (e: ChangeEvent) => {\n        const { name, value } = e.target as HTMLInputElement;\n        setValues(prevValues => ({\n            ...prevValues,\n            [name]: value,\n        }));\n    };\n    const clickHandler = (todo: FormValues) => {\n        const isVerified = ErrorsChecking();\n        if (isVerified && Object.keys(cat).length > 0 && typeof updateCat === \"function\" && typeof clearSingleCat === \"function\") {\n            updateCat(values);\n            clearSingleCat();\n            return;\n        }\n        if (isVerified && typeof addCats === \"function\") {\n            addCats(values);\n            setValues({ name: \"\", breed: \"\", description:\"\", age: \"\" });\n        }\n    };\n    return (\n        <div>\n            <Formik {...{ values, changeHandler, clickHandler, errors, clearSingleCat, cat }} />\n        </div>\n    );\n});\n\nexport default Todos;","import React, { FC, useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { FaTh } from 'react-icons/fa';\n\nconst DropDown: FC<any> = ({ removeCat, _id, getSingleCat }) => {\n    const [isToggle, setIsToggle] = useState<boolean>(false);\n    const toggle = () => setIsToggle(!isToggle);\n    return (\n        <Dropdown \n        Direction={\"right\"} \n        isOpen={isToggle} \n        toggle={toggle}\n        >\n            <DropdownToggle caret>\n                <FaTh />\n            </DropdownToggle>\n            <DropdownMenu>\n                <DropdownItem onClick={() => {\n                    if (typeof getSingleCat === \"function\") getSingleCat(_id);\n                }}>Edit</DropdownItem>\n                <DropdownItem onClick={() => {\n                    if (typeof removeCat === \"function\") removeCat(_id);\n                }}>Delete</DropdownItem>\n            </DropdownMenu>\n        </Dropdown>\n    );\n};\n\nexport default DropDown;","import { useContext, useState, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Context } from '../../ContextApi/StoreContext';\nimport Dropdown from '../components/DropDown';\n\nconst sidebar = observer(() => {\n    const { cats, getAllCats, removeCat, getSingleCat } = useContext(Context);\n    useEffect(() => {\n        typeof getAllCats === \"function\" && getAllCats();\n    }, []);\n    const showTodos = cats.map(({ name, description, _id, breed, age }) => <div className=\"border-bottom\" key={_id}>\n        <div className='float-right'><Dropdown {...{ removeCat, getSingleCat, _id }} /></div>\n        <div>\n            <p>Name: <b>{name}</b></p>\n            <p>Age: {age}</p>\n            <p>Breed: {breed}</p>\n            {description && <p>Description: {description}</p>}\n        </div>\n    </div>)\n    return (\n        <div className=\"\">\n            {showTodos}\n        </div>\n    );\n});\n\nexport default sidebar;","import React from 'react';\nimport { Container, Row, Col, } from 'reactstrap'\nimport Sidebar from '../Sidebar/containers/sidebar';\n\nconst layout = ({ children }: any) => {\n    return (\n        <Container className=\"layout-container bg-dark text-white\" fluid>\n            <Row>\n               <div className=\"\">\n                    <ul>\n                        <li><b>Improves your memory:</b> A to do list acts as an external memory aid.</li>\n                        <li><b>Increases productivity:</b> A to do list allows you to prioritize the tasks that are more important. </li>\n                        <li><b>Helps with motivation:</b> To do lists are a great motivational tool because you can use them to clarify your goals.</li>\n                    </ul>\n               </div>\n            </Row>\n            <Row>\n                <Col className=\"\" lg=\"3\" xl=\"3\" sm=\"3\" >\n                    <Sidebar />\n                </Col>\n                <Col className=\"\">\n                    {children}\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default layout;","import React, { FC } from 'react';\nimport Todos from './Todos/containers/todos';\nimport { Context } from './ContextApi/StoreContext';\nimport { useStore } from './Store/store';\nimport Layout from './Layouts/layout';\nimport { Store } from './Todos/interfaces';\n\nconst App: FC = () => {\n  const store: Store = useStore();\n  return (\n    <Context.Provider value={store}>\n      <Layout>\n        <Todos />\n      </Layout>\n    </Context.Provider>\n  );\n};\n\nexport default App;","\nimport { useLocalObservable } from 'mobx-react'\nimport { FormValues, Store } from '../Todos/interfaces';\nimport axios from 'axios';\nexport const useStore = () => {\n\tconst store: Store =  useLocalObservable(() => ({\n\t\tcats: [] as FormValues[],\n\t\tcat: {} as FormValues,\n\t\taddCats: (cat: FormValues) => {\n\t\t\taxios.put('http://localhost:5000/cats/create', cat)\n\t\t\t.then((newCat: FormValues[] | any) => {\n\t\t\t\tstore.cats.push(newCat.data);\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n\t\t},\n\t\tgetAllCats: () => {\n\t\t\taxios.get('http://localhost:5000/cats').then((allCats: FormValues[] | any) => {\n\t\t\t\tstore.cats.push(...allCats.data)\n\t\t\t}).catch(err => alert(err));\n\t\t},\n\t\tremoveCat: (_id: string | number) => {\n\t\t\taxios.post(`http://localhost:5000/cats/delete`, {id: _id})\n\t\t\t.then(res => {\n\t\t\t\tif (res) {\n\t\t\t\t\tconst filterd = store.cats.filter(cat => cat._id !== _id);\n\t\t\t\t\tstore.cats = filterd;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n\t\t},\n\t\tgetSingleCat: (_id: string) => {\n\t\t\tconst filterd = store.cats.filter(cat => cat._id === _id)[0];\n\t\t\tstore.cat = filterd;\n\t\t},\n\t\tclearSingleCat: () => {\n\t\t\tstore.cat = {} as FormValues;\n\t\t},\n\t\tupdateCat: (cat: FormValues) => {\n\t\t\taxios.post('http://localhost:5000/cats/update', cat)\n\t\t\t.then(res => {\n\t\t\t\tconst filterd = store.cats.filter(oldcats => cat._id !== oldcats._id);\n\t\t\t\tfilterd.push(res.data);\n\t\t\t\tstore.cats = filterd;\n\t\t\t}).catch(err => console.log(err));\n\t\t},\n\t}));\n\treturn store;\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import \"assets/css/nucleo-svg.css\";\n// import \"assets/css/nucleo-icons.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}